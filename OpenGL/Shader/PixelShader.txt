#version 330 core
out vec4 FragColor;

uniform sampler2D texture0;
uniform sampler2D texture1;

uniform vec3 lightPos;
uniform vec3 camPos;
//uniform vec4 ColorTest;

in vec4 ourColor;
in vec3 Normal;
in vec2 TexCoord;

in vec3 FragPos;

void main()
{
	
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	
	// ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(camPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  
	
	vec2 uv = 1.0f * TexCoord;
	vec4 objColor = mix(texture(texture0, uv), texture(texture1, uv), 0.2);//
	FragColor = vec4(ambient + diffuse + specular, 1.0) * objColor;//

}