#version 330 core
out vec4 FragColor;

struct Light
{
	vec4 lightPos;
	vec3 ambientStrength;
	vec3 diffuseStrength;
	vec3 specularStrength;
	
	float constant;
	float linear;
	float quadratic;
};

struct Material
{
	sampler2D diffuse;
	sampler2D specular;
	sampler2D emission;
	bool bEmission;
	int shininess;
};

uniform vec3 viewPos;
uniform Light light;
uniform Material material;

in vec4 VertexColor;
in vec3 Normal;
in vec2 TexCoord;

in vec3 FragPos;

void main()
{
	vec2 uv = 2.0f * vec2(TexCoord.x, 1.0 - TexCoord.y);
	vec3 diffuseColor = texture(material.diffuse, uv).rgb;
	
	float attenuation = 1.0;
	
	// ambient
    vec3 ambient = attenuation * diffuseColor * light.ambientStrength;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
	vec3 lightDir;
	if(light.lightPos.w == 0.)
	{
		lightDir = normalize(-light.lightPos.xyz);
	}
    else if(light.lightPos.w == 1.)
	{
		lightDir = normalize(light.lightPos.xyz - FragPos);
		float distance = length(light.lightPos.xyz - FragPos);
		attenuation /= (light.constant + light.linear * distance + light.quadratic * distance * distance);
	}
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = attenuation * diffuseColor * diff * light.diffuseStrength;
    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = attenuation * spec * light.specularStrength;
	specular *= texture(material.specular, uv).rgb;
	
	vec3 finalColor = min(ambient + diffuse + specular, 1.0);
	if(material.bEmission)
	{
		vec3 emissionColor = texture(material.emission, uv).rgb;
		finalColor = emissionColor;
	}
	
	FragColor = vec4(finalColor, 1.0);

}