#version 330 core
out vec4 FragColor;

struct Light
{
	vec3 lightPos;
	vec3 ambientStrength;
	vec3 diffuseStrength;
	vec3 specularStrength;
};

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform sampler2D texture0;
uniform sampler2D texture1;

uniform vec3 viewPos;
uniform Light light;
uniform Material material;

in vec4 ourColor;
in vec3 Normal;
in vec2 TexCoord;

in vec3 FragPos;

void main()
{
	// ambient
    vec3 ambient = material.ambient * light.ambientStrength;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = material.diffuse * diff * light.diffuseStrength;
    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = material.specular * spec * light.specularStrength;  
	
	vec2 uv = 1.0f * vec2(TexCoord.x, 1.0 - TexCoord.y);
	vec4 objColor = mix(texture(texture0, uv), texture(texture1, uv), 0.2);
	FragColor = vec4(min(ambient + diffuse + specular, 1.0), 1.0) * objColor;

}